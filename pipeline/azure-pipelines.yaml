trigger:
  branches:
    include:
      - '*'  # Trigger pipeline on all branches

pr:
  branches:
    include:
      - main  # Trigger pipeline on PRs to the 'main' branch

variables:
  terraformVersion: '1.5.0'  # Specify the Terraform version
  awsRegion: 'us-east-2'  # AWS Region to deploy to (adjust as needed)
  workingDirectory: 'example'  # Set working directory to 'example'
  group: ado-tf-aws-vpc

jobs:
- job: Terraform

  displayName: 'Terraform Provisioning'
  pool:
    vmImage: 'ubuntu-latest'  # Use an Ubuntu agent

  steps:
    # Step 1: Install Terraform using a script
    - script: |
        curl -sLo terraform.zip https://releases.hashicorp.com/terraform/$(terraformVersion)/terraform_$(terraformVersion)_linux_amd64.zip
        unzip terraform.zip
        sudo mv terraform /usr/local/bin/
        terraform --version
      displayName: 'Install Terraform'
      workingDirectory: $(System.DefaultWorkingDirectory)/$(workingDirectory)
      
    # Step 2: Terraform initialization and validation
    - script: |
        terraform init
        terraform validate
      displayName: 'Terraform Init and Validate'
      workingDirectory: $(System.DefaultWorkingDirectory)/$(workingDirectory)

    # Step 3: Terraform Plan (Run on non-main branches or PRs to main)
    - script: |
        terraform plan -out=tfplan
      displayName: 'Terraform Plan'
      condition: |
        and(
          ne(variables['Build.SourceBranchName'], 'refs/heads/main'),
          contains(variables['Build.SourceBranchName'], 'refs/pull')
        )
      workingDirectory: $(System.DefaultWorkingDirectory)/$(workingDirectory)

    # Step 4: Terraform Apply (Run only on main branch)
    - script: |
        terraform apply -auto-approve tfplan
      displayName: 'Terraform Apply'
      condition: eq(variables['Build.SourceBranchName'], 'refs/heads/main')
      workingDirectory: $(System.DefaultWorkingDirectory)/$(workingDirectory)